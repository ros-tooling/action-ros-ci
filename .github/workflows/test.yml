name: "Test action-ros-ci"
on:
  pull_request:
  push:
    branches:
      - master
      - 'releases/*'
  schedule:
    # Run the CI automatically every hour to look for flakyness.
    - cron:  '0 * * * *'

defaults:
  run:
    shell: bash

env:
  CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

jobs:
  test_ros:
    name: "Test ROS package"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        ros_distribution:  # ROS 1 tests only run on Ubuntu
          - kinetic
          - melodic

        # Define the Docker image(s) associated with each ROS distribution.
        # The include syntax allows additional variables to be defined, like
        # docker_image in this case. See documentation:
        # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#example-including-configurations-in-a-matrix-build
        #
        # Platforms are defined in REP 3: https://ros.org/reps/rep-0003.html
        include:
          # Kinetic Kame (May 2016 - May 2021)
          - docker_image: ubuntu:xenial
            ros_distribution: kinetic

          # Melodic Morenia (May 2018 - May 2023)
          - docker_image: ubuntu:bionic
            ros_distribution: melodic
    container:
      image: ${{ matrix.docker_image }}
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v1
      with:
        node-version: '12.x'
    - run: .github/workflows/build-and-test.sh
    - uses: ros-tooling/setup-ros@0.0.25
      with:
        required-ros-distributions: ${{ matrix.ros_distribution }}
    - uses: ./
      id: action-ros-ci
      with:
        vcs-repo-file-url: "${{ github.workspace }}/.github/workflows/ros_tutorials.repos"
        package-name: roscpp_tutorials
        source-ros-binary-installation: ${{ matrix.ros_distribution }}
    - run: test -d "${{ steps.action-ros-ci.outputs.ros-workspace-directory-name }}/install/roscpp_tutorials"
      name: "Check that roscpp_tutorials install directory is present"

  test_ros2:
    name: "Test ROS 2 package"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
          os: [macOS-latest, windows-latest]
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v1
      with:
        node-version: '12.x'
    - run: .github/workflows/build-and-test.sh
    - uses: ros-tooling/setup-ros@0.0.25
      with:
        required-ros-distributions: ${{ matrix.ros_distribution }}
    - uses: ./
      id: test_single_package
      name: "Test single package, default options"
      with:
        package-name: osrf_testing_tools_cpp
        source-ros-binary-installation: ${{ matrix.ros_distribution }}
        vcs-repo-file-url: "${{ github.workspace }}/.github/workflows/repo_file_for_test_cpp_package.repos"
      # TODO(tmoulard): re-enable this test once it passes on Windows
      if: matrix.os != 'windows-latest'
    - run: test -d "${{ steps.test_single_package.outputs.ros-workspace-directory-name }}/install/osrf_testing_tools_cpp"
      # TODO(tmoulard): re-enable this test once it passes on Windows
      if: matrix.os != 'windows-latest'

  test_ros2_docker:
    name: "Test ROS 2 package"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        ros_distribution:  # ROS 1 tests only run on Ubuntu
          - dashing
          - eloquent

        # Define the Docker image(s) associated with each ROS distribution.
        # The include syntax allows additional variables to be defined, like
        # docker_image in this case. See documentation:
        # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#example-including-configurations-in-a-matrix-build
        #
        # Platforms are defined in REP 2000: https://ros.org/reps/rep-2000.html
        include:
          # Dashing Diademata (May 2019 - May 2021)
          - docker_image: ubuntu:bionic
            ros_distribution: dashing

          # Eloquent Elusor (November 2019 - November 2020)
          - docker_image: ubuntu:bionic
            ros_distribution: eloquent
    container:
      image: ${{ matrix.docker_image }}
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v1
      with:
        node-version: '12.x'
    - run: .github/workflows/build-and-test.sh
    - uses: ros-tooling/setup-ros@0.0.25
      with:
        required-ros-distributions: ${{ matrix.ros_distribution }}

    - uses: ./
      name: "Test rosdep installs from correct distro"
      with:
        source-ros-binary-installation: ${{ matrix.ros_distribution }}
        vcs-repo-file-url: .github/workflows/repo_file_for_test_rosdep_distro.repos
        # test_msgs depends on test_interface_files, which should be installed by rosdep
        # If the dependencies are installed for the wrong distribution, then the build should fail
        package-name: test_msgs
    # Verify that rosdep installed the required Debian package
    - run: dpkg -s ros-${{ matrix.ros_distribution }}-test-interface-files

    - uses: ./
      id: test_single_package
      name: "Test single package, default options"
      with:
        package-name: osrf_testing_tools_cpp
        source-ros-binary-installation: ${{ matrix.ros_distribution }}
        vcs-repo-file-url: "${{ github.workspace }}/.github/workflows/repo_file_for_test_cpp_package.repos"
    - run: test -d "${{ steps.test_single_package.outputs.ros-workspace-directory-name }}/install/osrf_testing_tools_cpp"

  test_ros2_from_source:
    name: "Test ROS 2 package"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
          os: [macOS-latest, windows-latest]
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v1
      with:
        node-version: '12.x'
    - run: .github/workflows/build-and-test.sh
    - uses: ros-tooling/setup-ros@0.0.25
    - uses: ./
      id: test_single_package
      with:
        package-name: ament_copyright
    - run: test -d "${{ steps.test_single_package.outputs.ros-workspace-directory-name }}/install/ament_copyright"
      name: "Check that ament_copyright install directory is present"

    - uses: ./
      id: test_multiple_packages
      name: "Test multiple package, default options"
      with:
        package-name: ament_copyright ament_lint
    - run: test -d "${{ steps.test_multiple_packages.outputs.ros-workspace-directory-name }}/install/ament_copyright"
      name: "Check that ament_copyright install directory is present"
    - run: test -d "${{ steps.test_multiple_packages.outputs.ros-workspace-directory-name }}/install/ament_lint"
      name: "Check that ament_lint install directory is present"

    - uses: ./
      id: test_mixin
      name: "Test single package, with custom mixin"
      with:
        colcon-mixin-name: asan
        colcon-mixin-repository: https://raw.githubusercontent.com/colcon/colcon-mixin-repository/master/index.yaml
        package-name: ament_copyright
    - run: test -d "${{ steps.test_mixin.outputs.ros-workspace-directory-name }}/install/ament_copyright"
      name: "Check that ament_copyright install directory is present"

    - uses: ./
      id: test_repo
      name: "Test single package, with custom repository file"
      with:
        vcs-repo-file-url: "${{ github.workspace }}/.github/workflows/repo_file_for_test.repos"
        package-name: ament_copyright
    - run: test -d "${{ steps.test_repo.outputs.ros-workspace-directory-name }}/install/ament_copyright"

    # The second repo file is ignored, but will get vcs-import'ed anyway.
    # This test case just run basic testing on the action logic, making
    # sure the for-loop is implemented correctly.
    - uses: ./
      id: test_multiple_repos
      name: "Test single package, with multiple custom repository files"
      with:
        vcs-repo-file-url: |
            .github/workflows/repo_file_for_test.repos
            .github/workflows/repo_file_for_test_cpp_package.repos
        package-name: ament_copyright
    - run: test -d "${{ steps.test_multiple_repos.outputs.ros-workspace-directory-name }}/install/ament_copyright"
    - run: test -d "${{ steps.test_multiple_repos.outputs.ros-workspace-directory-name }}/src/ament_lint"
    - run: test -d "${{ steps.test_multiple_repos.outputs.ros-workspace-directory-name }}/src/osrf_testing_tools_cpp"

    - uses: ./
      id: test_coverage
      name: "Test single package, with coverage enabled (Linux only)"
      with:
        colcon-mixin-name: coverage-gcc
        colcon-mixin-repository: https://raw.githubusercontent.com/colcon/colcon-mixin-repository/master/index.yaml
        package-name: osrf_testing_tools_cpp
        vcs-repo-file-url: "${{ github.workspace }}/.github/workflows/repo_file_for_test_cpp_package.repos"
      if: matrix.os != 'windows-latest'
    - run: find ${{ steps.test_coverage.outputs.ros-workspace-directory-name }}/build -name "*.gcda" | grep -q "."
      name: "Check if one or more code coverage files (*.gcda) are present (Linux only)"
      if: matrix.os != 'windows-latest'

    - uses: ./
      id: test_extra_cmake
      name: "Test single package, with extra cmake flags"
      with:
        package-name: ament_cmake_core
        vcs-repo-file-url: "${{ github.workspace }}/.github/workflows/repo_file_for_test.repos"
        # We use a long unique string here to make sure that if this string
        # is found in CMakeCache.txt, it means the additional CMake flag has
        # been passed successfully. Non recognized flags are also written by
        # cmake into CMakeCache.txt, so this does not need to be a flag that
        # really exists in this package.
        extra-cmake-args: |
            -DADDITIONAL_CMAKE_OPTION_FOR_TEST:STR="9ae391a63628efe6d72ba34a1a1d9dc9"
    - run: grep -q 9ae391a63628efe6d72ba34a1a1d9dc9 ./${{ steps.test_extra_cmake.outputs.ros-workspace-directory-name }}/build/ament_cmake_core/CMakeCache.txt
      name: "Check that the additional extra flags has been correctly passed"

  test_ros2_source_not_defined:
    name: "Test ROS 2 package without defined source"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        ros_distribution:
          - dashing
          - eloquent

        include:
          # Dashing Diademata (May 2019 - May 2021)
          - docker_image: ubuntu:bionic
            ros_distribution: dashing

          # Eloquent Elusor (November 2019 - November 2020)
          - docker_image: ubuntu:bionic
            ros_distribution: eloquent
    container:
      image: ${{ matrix.docker_image }}
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v1
      with:
        node-version: '12.x'
    - run: .github/workflows/build-and-test.sh
    - uses: ros-tooling/setup-ros@0.0.25
      with:
        required-ros-distributions: ${{ matrix.ros_distribution }}
    - uses: ./
      name: "Test rosdep installs from correct distro"
      with:
        vcs-repo-file-url: .github/workflows/FIXME.repos
        package-name: ament_lint
    # Verify that rosdep installed the required Debian package
    - run: dpkg -s ros-${{ matrix.ros_distribution }}-ament-python

  test_ros2_from_source_docker:
    name: "Test ROS 2 package"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        ros_distribution:  # ROS 1 tests only run on Ubuntu
          - dashing
          - eloquent

        # Define the Docker image(s) associated with each ROS distribution.
        # The include syntax allows additional variables to be defined, like
        # docker_image in this case. See documentation:
        # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#example-including-configurations-in-a-matrix-build
        #
        # Platforms are defined in REP 2000: https://ros.org/reps/rep-2000.html
        include:
          # Dashing Diademata (May 2019 - May 2021)
          - docker_image: ubuntu:bionic
            ros_distribution: dashing
            distro_repos_url: https://raw.githubusercontent.com/ros2/ros2/dashing/ros2.repos

          # Eloquent Elusor (November 2019 - November 2020)
          - docker_image: ubuntu:bionic
            ros_distribution: eloquent
            distro_repos_url: https://raw.githubusercontent.com/ros2/ros2/eloquent/ros2.repos
    container:
      image: ${{ matrix.docker_image }}
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v1
      with:
        node-version: '12.x'
    - run: .github/workflows/build-and-test.sh
    - uses: ros-tooling/setup-ros@0.0.25
    - uses: ./
      id: test_single_package
      with:
        package-name: ament_copyright
        vcs-repo-file-url: ${{ matrix.distro_repos_url }}
    - run: test -d "${{ steps.test_single_package.outputs.ros-workspace-directory-name }}/install/ament_copyright"
      name: "Check that ament_copyright install directory is present"

    - uses: ./
      id: test_multiple_packages
      name: "Test multiple package, default options"
      with:
        package-name: ament_copyright ament_lint
        vcs-repo-file-url: ${{ matrix.distro_repos_url }}
    - run: test -d "${{ steps.test_multiple_packages.outputs.ros-workspace-directory-name }}/install/ament_copyright"
      name: "Check that ament_copyright install directory is present"
    - run: test -d "${{ steps.test_multiple_packages.outputs.ros-workspace-directory-name }}/install/ament_lint"
      name: "Check that ament_lint install directory is present"

    - uses: ./
      id: test_mixin
      name: "Test single package, with custom mixin"
      with:
        colcon-mixin-name: asan
        colcon-mixin-repository: https://raw.githubusercontent.com/colcon/colcon-mixin-repository/master/index.yaml
        package-name: ament_copyright
        vcs-repo-file-url: ${{ matrix.distro_repos_url }}
    - run: test -d "${{ steps.test_mixin.outputs.ros-workspace-directory-name }}/install/ament_copyright"
      name: "Check that ament_copyright install directory is present"

    - uses: ./
      id: test_repo
      name: "Test single package, with custom repository file"
      with:
        vcs-repo-file-url: "${{ github.workspace }}/.github/workflows/repo_file_for_test.repos"
        package-name: ament_copyright
    - run: test -d "${{ steps.test_repo.outputs.ros-workspace-directory-name }}/install/ament_copyright"

    # The second repo file is ignored, but will get vcs-import'ed anyway.
    # This test case just run basic testing on the action logic, making
    # sure the for-loop is implemented correctly.
    - uses: ./
      id: test_multiple_repos
      name: "Test single package, with multiple custom repository files"
      with:
        vcs-repo-file-url: |
            .github/workflows/repo_file_for_test.repos
            .github/workflows/repo_file_for_test_cpp_package.repos
        package-name: ament_copyright
    - run: test -d "${{ steps.test_multiple_repos.outputs.ros-workspace-directory-name }}/install/ament_copyright"
    - run: test -d "${{ steps.test_multiple_repos.outputs.ros-workspace-directory-name }}/src/ament_lint"
    - run: test -d "${{ steps.test_multiple_repos.outputs.ros-workspace-directory-name }}/src/osrf_testing_tools_cpp"

    - uses: ./
      id: test_coverage
      name: "Test single package, with coverage enabled (Linux only)"
      with:
        colcon-mixin-name: coverage-gcc
        colcon-mixin-repository: https://raw.githubusercontent.com/colcon/colcon-mixin-repository/master/index.yaml
        package-name: osrf_testing_tools_cpp
        vcs-repo-file-url: "${{ github.workspace }}/.github/workflows/repo_file_for_test_cpp_package.repos"
    - run: find ${{ steps.test_coverage.outputs.ros-workspace-directory-name }}/build -name "*.gcda" | grep -q "."
      name: "Check if one or more code coverage files (*.gcda) are present (Linux only)"

    - uses: ./
      id: test_extra_cmake
      name: "Test single package, with extra cmake flags"
      with:
        package-name: ament_cmake_core
        vcs-repo-file-url: "${{ github.workspace }}/.github/workflows/repo_file_for_test.repos"
        # We use a long unique string here to make sure that if this string
        # is found in CMakeCache.txt, it means the additional CMake flag has
        # been passed successfully. Non recognized flags are also written by
        # cmake into CMakeCache.txt, so this does not need to be a flag that
        # really exists in this package.
        extra-cmake-args: |
            -DADDITIONAL_CMAKE_OPTION_FOR_TEST:STR="9ae391a63628efe6d72ba34a1a1d9dc9"
    - run: grep -q 9ae391a63628efe6d72ba34a1a1d9dc9 ./${{ steps.test_extra_cmake.outputs.ros-workspace-directory-name }}/build/ament_cmake_core/CMakeCache.txt
      name: "Check that the additional extra flags has been correctly passed"

  log_workflow_status_to_cloudwatch:
    runs-on: ubuntu-latest
    container:
      image: ubuntu:bionic
    needs:
    - test_ros
    - test_ros2
    - test_ros2_docker
    - test_ros2_from_source
    - test_ros2_from_source_docker
    if: always()  # run even if the dependent jobs have failed to log failures
    # Allow build reports to fail on pull requests.
    # When a contribution is made on a fork, the secrets will not be available,
    # and this step will be failing. This is acceptable.
    # On the other end, we want to be notified if this happens on merge, or
    # on schedule.
    continue-on-error: ${{ github.event_name == 'pull_request'}}
    steps:
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    - uses: ros-tooling/action-cloudwatch-metrics@0.0.4
      with:
        # Checks if any of the jobs have failed.
        #
        # needs.*.result is returns the list of all success statuses as an
        # array, i.e. ['success', 'failure, 'success']
        # join() converts the array to a string 'successfailuresuccess'
        # contains() checks whether the string contains failure
        metric-value: ${{ ! contains(join(needs.*.result, ''), 'failure') && ! contains(join(needs.*.result, ''), 'cancelled') }}
