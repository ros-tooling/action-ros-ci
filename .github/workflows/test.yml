name: "Test action-ros-ci"
on:
  pull_request:
  push:
    branches:
      - master
      - 'releases/*'
      # Greenkeeper provides automated dependency management
      # for this repository. It will automatically create
      # new branches with updated npm versions, and send
      # PRs for those automatically, if they build.
      # Greenkeeper relies on this CI to determine if a
      # PR needs to be open or not, and as such we need
      # to whitelist those branches for CI run here.
      # See also https://greenkeeper.io/faq#no-initial-pr
      - 'greenkeeper**'
  schedule:
    # Run the CI automatically every hour to look for flakyness.
    - cron:  '0 * * * *'

jobs:
  test_ros:
    name: "ROS Test Suite"
    # ROS 1 tests only run on Ubuntu
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v1
      with:
        node-version: '12.x'

    - run: npm ci
    - run: npm run build

    - uses: ros-tooling/setup-ros@0.0.16
      with:
        required-ros-distributions: melodic

    - uses: ./
      id: action-ros
      name: "Build and run tests for a single package (Melodic)"
      with:
        vcs-repo-file-url: "${{ github.workspace }}/.github/workflows/ros_tutorials.repos"
        package-name: roscpp_tutorials
        source-ros-binary-installation: melodic
    - run: test -d "${{ steps.action-ros.outputs.ros-workspace-directory-name }}/install/roscpp_tutorials"
      name: "Check that roscpp_tutorials install directory is present"

  test_ros_docker_kinetic:
    name: "ROS Test Suite (Docker, Kinetic)"
    container:
      image: ubuntu:xenial
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v1
      with:
        node-version: '12.x'

    - run: npm ci
    - run: npm run build

    - uses: ros-tooling/setup-ros@0.0.16
      with:
        required-ros-distributions: kinetic

    - uses: ./
      id: action-ros
      name: "Build and run tests for a single package (Kinetic)"
      with:
        vcs-repo-file-url: "${{ github.workspace }}/.github/workflows/ros_tutorials.repos"
        package-name: roscpp_tutorials
        source-ros-binary-installation: kinetic
    - run: test -d "${{ steps.action-ros.outputs.ros-workspace-directory-name }}/install/roscpp_tutorials"
      name: "Check that roscpp_tutorials install directory is present"

  test_ros_docker_melodic:
    name: "ROS Test Suite (Docker, Melodic)"
    container:
      image: ubuntu:bionic
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v1
      with:
        node-version: '12.x'

    - run: npm ci
    - run: npm run build

    - uses: ros-tooling/setup-ros@0.0.16
      with:
        required-ros-distributions: melodic

    - uses: ./
      id: action-ros
      name: "Build and run tests for a single package (Kinetic)"
      with:
        vcs-repo-file-url: "${{ github.workspace }}/.github/workflows/ros_tutorials.repos"
        package-name: roscpp_tutorials
        source-ros-binary-installation: melodic
    - run: test -d "${{ steps.action-ros.outputs.ros-workspace-directory-name }}/install/roscpp_tutorials"
      name: "Check that roscpp_tutorials install directory is present"

  test_ros2:
    name: "ROS 2 Test Suite"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
          os: [macOS-latest, ubuntu-18.04, windows-latest]
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v1
      with:
        node-version: '12.x'

    - run: npm ci
    - run: npm run build

    - uses: ros-tooling/setup-ros@0.0.16

    - uses: ./
      id: action-ros
      name: "Test single package, default options"
      with:
        package-name: ament_copyright
    - run: test -d "${{ steps.action-ros.outputs.ros-workspace-directory-name }}/install/ament_copyright"
      name: "Check that ament_copyright install directory is present"
      shell: bash

    - uses: ./
      id: action-ros2
      name: "Test multiple package, default options"
      with:
        package-name: ament_copyright ament_lint
    - run: test -d "${{ steps.action-ros2.outputs.ros-workspace-directory-name }}/install/ament_copyright"
      name: "Check that ament_copyright install directory is present"
      shell: bash
    - run: test -d "${{ steps.action-ros2.outputs.ros-workspace-directory-name }}/install/ament_lint"
      name: "Check that ament_lint install directory is present"
      shell: bash

    - uses: ./
      id: action-ros3
      name: "Test single package, with custom mixin"
      with:
        colcon-mixin-name: asan
        colcon-mixin-repository: https://raw.githubusercontent.com/colcon/colcon-mixin-repository/master/index.yaml
        package-name: ament_copyright
    - run: test -d "${{ steps.action-ros3.outputs.ros-workspace-directory-name }}/install/ament_copyright"
      name: "Check that ament_copyright install directory is present"
      shell: bash

    - uses: ./
      id: action-ros4
      name: "Test single package, with custom repository file"
      with:
        vcs-repo-file-url: "${{ github.workspace }}/.github/workflows/repo_file_for_test.repos"
        package-name: ament_copyright
    - run: test -d "${{ steps.action-ros4.outputs.ros-workspace-directory-name }}/install/ament_copyright"
      shell: bash

    - uses: ./
      id: action-ros5
      name: "Test single package, with coverage enabled (Linux only)"
      with:
        colcon-mixin-name: coverage-gcc
        colcon-mixin-repository: https://raw.githubusercontent.com/colcon/colcon-mixin-repository/master/index.yaml
        package-name: osrf_testing_tools_cpp
        vcs-repo-file-url: "${{ github.workspace }}/.github/workflows/repo_file_for_test_cpp_package.repos"
      if: matrix.os != 'windows-latest'
    - run: find ${{ steps.action-ros5.outputs.ros-workspace-directory-name }}/build -name "*.gcda" | grep -q "."
      name: "Check if one or more code coverage files (*.gcda) are present (Linux only)"
      shell: bash
      if: matrix.os != 'windows-latest'

    - uses: ./
      id: action-ros6
      name: "Test single package, with extra cmake flags"
      with:
        package-name: ament_cmake_core
        vcs-repo-file-url: "${{ github.workspace }}/.github/workflows/repo_file_for_test.repos"
        # We use a long unique string here to make sure that if this string
        # is found in CMakeCache.txt, it means the additional CMake flag has
        # been passed successfully. Non recognized flags are also written by
        # cmake into CMakeCache.txt, so this does not need to be a flag that
        # really exists in this package.
        extra-cmake-args: |
            -DADDITIONAL_CMAKE_OPTION_FOR_TEST:STR="9ae391a63628efe6d72ba34a1a1d9dc9"
    - run: grep -q 9ae391a63628efe6d72ba34a1a1d9dc9 ./${{ steps.action-ros6.outputs.ros-workspace-directory-name }}/build/ament_cmake_core/CMakeCache.txt
      name: "Check that the additional extra flags has been correctly passed"

  test_ros2_rosdep:
    name: "ROS 2 Test Suite (rosdep, Dashing binary)"
    # Sourcing binary installations is only available on Linux
    runs-on: ubuntu-18.04
    strategy:
      fail-fast: false
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v1
      with:
        node-version: '12.x'

    - run: npm ci
    - run: npm run build

    - uses: ros-tooling/setup-ros@0.0.16
      with:
        required-ros-distributions: dashing

    - uses: ./
      id: action-ros
      name: "Test rosdep installs from correct distro"
      with:
        source-ros-binary-installation: dashing
        vcs-repo-file-url: .github/workflows/repo_file_for_test_rosdep_distro.repos
        # test_msgs depends on test_interface_files, which should be installed by rosdep
        # If the dependencies are installed for the wrong distribution, then the build should fail
        package-name: test_msgs

  test_ros2_docker_dashing:
    name: "ROS 2 Test Suite (Docker, Dashing)"
    container:
      image: ubuntu:bionic
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v1
      with:
        node-version: '12.x'

    - run: npm ci
    - run: npm run build

    - uses: ros-tooling/setup-ros@0.0.16
      with:
        required-ros-distributions: dashing

    - uses: ./
      id: action-ros
      name: "Test single package, default options"
      with:
        package-name: osrf_testing_tools_cpp
        source-ros-binary-installation: dashing
        vcs-repo-file-url: "${{ github.workspace }}/.github/workflows/repo_file_for_test_cpp_package.repos"
    - run: test -d "${{ steps.action-ros.outputs.ros-workspace-directory-name }}/install/osrf_testing_tools_cpp"
      name: "Check that ament_copyright install directory is present"
      shell: bash

  test_ros2_docker_eloquent:
    name: "ROS 2 Test Suite (Docker, Eloquent)"
    container:
      image: ubuntu:bionic
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v1
      with:
        node-version: '12.x'

    - run: npm ci
    - run: npm run build

    - uses: ros-tooling/setup-ros@0.0.16
      with:
        required-ros-distributions: eloquent

    - uses: ./
      id: action-ros
      name: "Test single package, default options"
      with:
        package-name: osrf_testing_tools_cpp
        source-ros-binary-installation: eloquent
        vcs-repo-file-url: "${{ github.workspace }}/.github/workflows/repo_file_for_test_cpp_package.repos"
    - run: test -d "${{ steps.action-ros.outputs.ros-workspace-directory-name }}/install/osrf_testing_tools_cpp"
      name: "Check that ament_copyright install directory is present"
      shell: bash
